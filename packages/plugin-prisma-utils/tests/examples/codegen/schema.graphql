input BooleanFilter {
  equals: Boolean
  in: [Boolean!]
  is: Boolean
  isNot: Boolean
  not: BooleanFilter
  notIn: [Boolean!]
}

enum Category {
  CULTURE
  SCIENCE
  SPORTS
  TECH
}

input CategoryFilter {
  equals: Category
  in: [Category!]
  is: Category
  isNot: Category
  not: CategoryFilter
  notIn: [Category!]
}

input CategoryListFilter {
  every: CategoryFilter
  none: CategoryFilter
  some: CategoryFilter
}

type Comment {
  author: User!
  content: String!
  id: ID!
  post: Post!
}

input CommentCreate {
  author: CommentCreateAuthorRelationInput!
  authorId: Int!
  content: String!
  createdAt: DateTime
  id: Int
  post: CommentCreatePostRelationInput!
  postId: Int!
}

input CommentCreateAuthorRelationInput {
  connect: UserUniqueFilter
  create: UserCreateWithoutComments
}

input CommentCreatePostRelationInput {
  connect: PostUniqueFilter
  create: PostCreateWithoutComments
}

input CommentCreateWithoutAuthor {
  content: String!
  createdAt: DateTime
  id: Int
  post: CommentCreatePostRelationInput!
  postId: Int!
}

input CommentCreateWithoutPost {
  author: CommentCreateAuthorRelationInput!
  authorId: Int!
  content: String!
  createdAt: DateTime
  id: Int
}

input CommentFilter {
  author: UserFilter
  authorId: IntFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  post: PostFilter
  postId: IntFilter
}

input CommentListFilter {
  every: CommentFilter
  none: CommentFilter
  some: CommentFilter
}

input CommentOrderBy {
  author: UserOrderBy
  authorId: OrderBy
  content: OrderBy
  createdAt: OrderBy
  id: OrderBy
  post: PostOrderBy
  postId: OrderBy
}

input CommentUniqueFilter {
  author: UserFilter
  authorId: IntFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  post: PostFilter
  postId: IntFilter
}

input CommentUpdate {
  author: CommentCreateAuthorRelationInput
  authorId: Int
  content: String
  createdAt: DateTime
  id: Int
  post: CommentCreatePostRelationInput
  postId: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: DateTime
  isNot: DateTime
  lt: DateTime
  lte: DateTime
  not: DateTimeFilter
  notIn: [DateTime!]
}

input FindUniqueRelationsCreate {
  id: String!
  withCompositeID: FindUniqueRelationsCreateWithCompositeIDRelationInput!
  withCompositeID_a: String!
  withCompositeID_b: String!
  withCompositeUnique: FindUniqueRelationsCreateWithCompositeUniqueRelationInput!
  withCompositeUnique_a: String!
  withCompositeUnique_b: String!
  withID: FindUniqueRelationsCreateWithIDRelationInput!
  withID_id: String!
  withUnique: FindUniqueRelationsCreateWithUniqueRelationInput!
  withUnique_id: String!
}

input FindUniqueRelationsCreateWithCompositeIDRelationInput {
  connect: WithCompositeIDUniqueFilter
  create: WithCompositeIDCreateWithoutFindUniqueRelations
}

input FindUniqueRelationsCreateWithCompositeUniqueRelationInput {
  connect: WithCompositeUniqueUniqueFilter
  create: WithCompositeUniqueCreateWithoutFindUniqueRelations
}

input FindUniqueRelationsCreateWithIDRelationInput {
  connect: WithIDUniqueFilter
  create: WithIDCreateWithoutFindUniqueRelations
}

input FindUniqueRelationsCreateWithUniqueRelationInput {
  connect: WithUniqueUniqueFilter
  create: WithUniqueCreateWithoutFindUniqueRelations
}

input FindUniqueRelationsCreateWithoutWithCompositeID {
  id: String!
  withCompositeUnique: FindUniqueRelationsCreateWithCompositeUniqueRelationInput!
  withCompositeUnique_a: String!
  withCompositeUnique_b: String!
  withID: FindUniqueRelationsCreateWithIDRelationInput!
  withID_id: String!
  withUnique: FindUniqueRelationsCreateWithUniqueRelationInput!
  withUnique_id: String!
}

input FindUniqueRelationsCreateWithoutWithCompositeUnique {
  id: String!
  withCompositeID: FindUniqueRelationsCreateWithCompositeIDRelationInput!
  withCompositeID_a: String!
  withCompositeID_b: String!
  withID: FindUniqueRelationsCreateWithIDRelationInput!
  withID_id: String!
  withUnique: FindUniqueRelationsCreateWithUniqueRelationInput!
  withUnique_id: String!
}

input FindUniqueRelationsCreateWithoutWithID {
  id: String!
  withCompositeID: FindUniqueRelationsCreateWithCompositeIDRelationInput!
  withCompositeID_a: String!
  withCompositeID_b: String!
  withCompositeUnique: FindUniqueRelationsCreateWithCompositeUniqueRelationInput!
  withCompositeUnique_a: String!
  withCompositeUnique_b: String!
  withUnique: FindUniqueRelationsCreateWithUniqueRelationInput!
  withUnique_id: String!
}

input FindUniqueRelationsCreateWithoutWithUnique {
  id: String!
  withCompositeID: FindUniqueRelationsCreateWithCompositeIDRelationInput!
  withCompositeID_a: String!
  withCompositeID_b: String!
  withCompositeUnique: FindUniqueRelationsCreateWithCompositeUniqueRelationInput!
  withCompositeUnique_a: String!
  withCompositeUnique_b: String!
  withID: FindUniqueRelationsCreateWithIDRelationInput!
  withID_id: String!
}

input FindUniqueRelationsFilter {
  id: StringFilter
  withCompositeID: WithCompositeIDFilter
  withCompositeID_a: StringFilter
  withCompositeID_b: StringFilter
  withCompositeUnique: WithCompositeUniqueFilter
  withCompositeUnique_a: StringFilter
  withCompositeUnique_b: StringFilter
  withID: WithIDFilter
  withID_id: StringFilter
  withUnique: WithUniqueFilter
  withUnique_id: StringFilter
}

input FindUniqueRelationsListFilter {
  every: FindUniqueRelationsFilter
  none: FindUniqueRelationsFilter
  some: FindUniqueRelationsFilter
}

input FindUniqueRelationsOrderBy {
  id: OrderBy
  withCompositeID: WithCompositeIDOrderBy
  withCompositeID_a: OrderBy
  withCompositeID_b: OrderBy
  withCompositeUnique: WithCompositeUniqueOrderBy
  withCompositeUnique_a: OrderBy
  withCompositeUnique_b: OrderBy
  withID: WithIDOrderBy
  withID_id: OrderBy
  withUnique: WithUniqueOrderBy
  withUnique_id: OrderBy
}

input FindUniqueRelationsUniqueFilter {
  id: StringFilter
  withCompositeID: WithCompositeIDFilter
  withCompositeID_a: StringFilter
  withCompositeID_b: StringFilter
  withCompositeUnique: WithCompositeUniqueFilter
  withCompositeUnique_a: StringFilter
  withCompositeUnique_b: StringFilter
  withID: WithIDFilter
  withID_id: StringFilter
  withUnique: WithUniqueFilter
  withUnique_id: StringFilter
}

input FindUniqueRelationsUpdate {
  id: String
  withCompositeID: FindUniqueRelationsCreateWithCompositeIDRelationInput
  withCompositeID_a: String
  withCompositeID_b: String
  withCompositeUnique: FindUniqueRelationsCreateWithCompositeUniqueRelationInput
  withCompositeUnique_a: String
  withCompositeUnique_b: String
  withID: FindUniqueRelationsCreateWithIDRelationInput
  withID_id: String
  withUnique: FindUniqueRelationsCreateWithUniqueRelationInput
  withUnique_id: String
}

input FollowCreate {
  from: FollowCreateFromRelationInput!
  fromId: Int!
  to: FollowCreateToRelationInput!
  toId: Int!
}

input FollowCreateFromRelationInput {
  connect: UserUniqueFilter
  create: UserCreateWithoutFollowing
}

input FollowCreateToRelationInput {
  connect: UserUniqueFilter
  create: UserCreateWithoutFollowers
}

input FollowCreateWithoutFrom {
  to: FollowCreateToRelationInput!
  toId: Int!
}

input FollowCreateWithoutTo {
  from: FollowCreateFromRelationInput!
  fromId: Int!
}

input FollowFilter {
  from: UserFilter
  fromId: IntFilter
  to: UserFilter
  toId: IntFilter
}

input FollowListFilter {
  every: FollowFilter
  none: FollowFilter
  some: FollowFilter
}

input FollowOrderBy {
  from: UserOrderBy
  fromId: OrderBy
  to: UserOrderBy
  toId: OrderBy
}

input FollowUniqueFilter {
  from: UserFilter
  fromId: IntFilter
  to: UserFilter
  toId: IntFilter
}

input FollowUpdate {
  from: FollowCreateFromRelationInput
  fromId: Int
  to: FollowCreateToRelationInput
  toId: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  is: Int
  isNot: Int
  lt: Int
  lte: Int
  not: IntFilter
  notIn: [Int!]
}

input MediaCreate {
  id: Int
  posts: MediaCreatePostsRelationInput
  uploadedBy: MediaCreateUploadedByRelationInput
  uploadedById: Int
  url: String!
}

input MediaCreatePostsRelationInput {
  connect: [PostMediaUniqueFilter!]
  create: [PostMediaCreateWithoutMedia!]
}

input MediaCreateUploadedByRelationInput {
  connect: UserUniqueFilter
  create: UserCreateWithoutMedia
}

input MediaCreateWithoutPosts {
  id: Int
  uploadedBy: MediaCreateUploadedByRelationInput
  uploadedById: Int
  url: String!
}

input MediaCreateWithoutUploadedBy {
  id: Int
  posts: MediaCreatePostsRelationInput
  url: String!
}

input MediaFilter {
  id: IntFilter
  posts: PostMediaListFilter
  uploadedBy: UserFilter
  uploadedById: IntFilter
  url: StringFilter
}

input MediaListFilter {
  every: MediaFilter
  none: MediaFilter
  some: MediaFilter
}

input MediaOrderBy {
  id: OrderBy
  posts: PostMediaOrderBy
  uploadedBy: UserOrderBy
  uploadedById: OrderBy
  url: OrderBy
}

input MediaUniqueFilter {
  id: IntFilter
  posts: PostMediaListFilter
  uploadedBy: UserFilter
  uploadedById: IntFilter
  url: StringFilter
}

input MediaUpdate {
  id: Int
  posts: MediaCreatePostsRelationInput
  uploadedBy: MediaCreateUploadedByRelationInput
  uploadedById: Int
  url: String
}

enum OrderBy {
  Asc
  Desc
}

type Post {
  author: User!
  comments(filter: CommentFilter! = {}, orderBy: CommentOrderBy! = {id: Asc}): [Comment!]!
  content: String
  id: ID!
  published: Boolean!
  title: String!
}

input PostCreate {
  author: PostCreateAuthorRelationInput!
  authorId: Int!
  categories: [Category!]
  comments: PostCreateCommentsRelationInput
  content: String
  createdAt: DateTime
  id: Int
  media: PostCreateMediaRelationInput
  published: Boolean
  tags: [String!]
  title: String!
  updatedAt: DateTime
}

input PostCreateAuthorRelationInput {
  connect: UserUniqueFilter
  create: UserCreateWithoutPosts
}

input PostCreateCommentsRelationInput {
  connect: [CommentUniqueFilter!]
  create: [CommentCreateWithoutPost!]
}

input PostCreateMediaRelationInput {
  connect: [PostMediaUniqueFilter!]
  create: [PostMediaCreateWithoutPost!]
}

input PostCreateWithoutAuthor {
  categories: [Category!]
  comments: PostCreateCommentsRelationInput
  content: String
  createdAt: DateTime
  id: Int
  media: PostCreateMediaRelationInput
  published: Boolean
  tags: [String!]
  title: String!
  updatedAt: DateTime
}

input PostCreateWithoutComments {
  author: PostCreateAuthorRelationInput!
  authorId: Int!
  categories: [Category!]
  content: String
  createdAt: DateTime
  id: Int
  media: PostCreateMediaRelationInput
  published: Boolean
  tags: [String!]
  title: String!
  updatedAt: DateTime
}

input PostCreateWithoutMedia {
  author: PostCreateAuthorRelationInput!
  authorId: Int!
  categories: [Category!]
  comments: PostCreateCommentsRelationInput
  content: String
  createdAt: DateTime
  id: Int
  published: Boolean
  tags: [String!]
  title: String!
  updatedAt: DateTime
}

input PostFilter {
  author: UserFilter
  authorId: IntFilter
  categories: CategoryListFilter
  comments: CommentListFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  media: PostMediaListFilter
  published: BooleanFilter
  tags: StringListFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostListFilter {
  every: PostFilter
  none: PostFilter
  some: PostFilter
}

input PostMediaCreate {
  id: Int
  media: PostMediaCreateMediaRelationInput!
  mediaId: Int!
  order: Int!
  post: PostMediaCreatePostRelationInput!
  postId: Int!
}

input PostMediaCreateMediaRelationInput {
  connect: MediaUniqueFilter
  create: MediaCreateWithoutPosts
}

input PostMediaCreatePostRelationInput {
  connect: PostUniqueFilter
  create: PostCreateWithoutMedia
}

input PostMediaCreateWithoutMedia {
  id: Int
  order: Int!
  post: PostMediaCreatePostRelationInput!
  postId: Int!
}

input PostMediaCreateWithoutPost {
  id: Int
  media: PostMediaCreateMediaRelationInput!
  mediaId: Int!
  order: Int!
}

input PostMediaFilter {
  id: IntFilter
  media: MediaFilter
  mediaId: IntFilter
  order: IntFilter
  post: PostFilter
  postId: IntFilter
}

input PostMediaListFilter {
  every: PostMediaFilter
  none: PostMediaFilter
  some: PostMediaFilter
}

input PostMediaOrderBy {
  id: OrderBy
  media: MediaOrderBy
  mediaId: OrderBy
  order: OrderBy
  post: PostOrderBy
  postId: OrderBy
}

input PostMediaUniqueFilter {
  id: IntFilter
  media: MediaFilter
  mediaId: IntFilter
  order: IntFilter
  post: PostFilter
  postId: IntFilter
}

input PostMediaUpdate {
  id: Int
  media: PostMediaCreateMediaRelationInput
  mediaId: Int
  order: Int
  post: PostMediaCreatePostRelationInput
  postId: Int
}

input PostOrderBy {
  author: UserOrderBy
  authorId: OrderBy
  categories: OrderBy
  comments: CommentOrderBy
  content: OrderBy
  createdAt: OrderBy
  id: OrderBy
  media: PostMediaOrderBy
  published: OrderBy
  tags: OrderBy
  title: OrderBy
  updatedAt: OrderBy
}

input PostUniqueFilter {
  author: UserFilter
  authorId: IntFilter
  categories: CategoryListFilter
  comments: CommentListFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  media: PostMediaListFilter
  published: BooleanFilter
  tags: StringListFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostUpdate {
  author: PostCreateAuthorRelationInput
  authorId: Int
  categories: [Category!]
  comments: PostCreateCommentsRelationInput
  content: String
  createdAt: DateTime
  id: Int
  media: PostCreateMediaRelationInput
  published: Boolean
  tags: [String!]
  title: String
  updatedAt: DateTime
}

type Profile {
  bio: String
  id: ID!
  user: User!
}

input ProfileCreate {
  bio: String
  id: Int
  user: ProfileCreateUserRelationInput!
  userId: Int!
}

input ProfileCreateUserRelationInput {
  connect: UserUniqueFilter
  create: UserCreateWithoutProfile
}

input ProfileCreateWithoutUser {
  bio: String
  id: Int
}

input ProfileFilter {
  bio: StringFilter
  id: IntFilter
  user: UserFilter
  userId: IntFilter
}

input ProfileOrderBy {
  bio: OrderBy
  id: OrderBy
  user: UserOrderBy
  userId: OrderBy
}

input ProfileUniqueFilter {
  bio: StringFilter
  id: IntFilter
  user: UserFilter
  userId: IntFilter
}

input ProfileUpdate {
  bio: String
  id: Int
  user: ProfileCreateUserRelationInput
  userId: Int
}

type Query {
  user(where: UserUniqueFilter!): User
  users(filter: UserFilter! = {}, orderBy: UserOrderBy! = {id: Asc}): [User!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  is: String
  isNot: String
  lt: String
  lte: String
  not: StringFilter
  notIn: [String!]
  startsWith: String
}

input StringListFilter {
  every: StringFilter
  none: StringFilter
  some: StringFilter
}

input UnrelatedCreate {
  id: Int
  name: String
}

input UnrelatedFilter {
  id: IntFilter
  name: StringFilter
}

input UnrelatedOrderBy {
  id: OrderBy
  name: OrderBy
}

input UnrelatedUniqueFilter {
  id: IntFilter
  name: StringFilter
}

input UnrelatedUpdate {
  id: Int
  name: String
}

type User {
  email: String!
  id: ID!
  name: String
  posts(filter: PostFilter! = {}, orderBy: PostOrderBy! = {id: Asc}): [Post!]!
  profile: Profile!
}

input UserCreate {
  Media: UserCreateMediaRelationInput
  comments: UserCreateCommentsRelationInput
  email: String!
  followers: UserCreateFollowersRelationInput
  following: UserCreateFollowingRelationInput
  id: Int
  name: String
  posts: UserCreatePostsRelationInput
  profile: UserCreateProfileRelationInput
}

input UserCreateCommentsRelationInput {
  connect: [CommentUniqueFilter!]
  create: [CommentCreateWithoutAuthor!]
}

input UserCreateFollowersRelationInput {
  connect: [FollowUniqueFilter!]
  create: [FollowCreateWithoutTo!]
}

input UserCreateFollowingRelationInput {
  connect: [FollowUniqueFilter!]
  create: [FollowCreateWithoutFrom!]
}

input UserCreateMediaRelationInput {
  connect: [MediaUniqueFilter!]
  create: [MediaCreateWithoutUploadedBy!]
}

input UserCreatePostsRelationInput {
  connect: [PostUniqueFilter!]
  create: [PostCreateWithoutAuthor!]
}

input UserCreateProfileRelationInput {
  connect: ProfileUniqueFilter
  create: ProfileCreateWithoutUser
}

input UserCreateWithoutComments {
  Media: UserCreateMediaRelationInput
  email: String!
  followers: UserCreateFollowersRelationInput
  following: UserCreateFollowingRelationInput
  id: Int
  name: String
  posts: UserCreatePostsRelationInput
  profile: UserCreateProfileRelationInput
}

input UserCreateWithoutFollowers {
  Media: UserCreateMediaRelationInput
  comments: UserCreateCommentsRelationInput
  email: String!
  following: UserCreateFollowingRelationInput
  id: Int
  name: String
  posts: UserCreatePostsRelationInput
  profile: UserCreateProfileRelationInput
}

input UserCreateWithoutFollowing {
  Media: UserCreateMediaRelationInput
  comments: UserCreateCommentsRelationInput
  email: String!
  followers: UserCreateFollowersRelationInput
  id: Int
  name: String
  posts: UserCreatePostsRelationInput
  profile: UserCreateProfileRelationInput
}

input UserCreateWithoutMedia {
  comments: UserCreateCommentsRelationInput
  email: String!
  followers: UserCreateFollowersRelationInput
  following: UserCreateFollowingRelationInput
  id: Int
  name: String
  posts: UserCreatePostsRelationInput
  profile: UserCreateProfileRelationInput
}

input UserCreateWithoutPosts {
  Media: UserCreateMediaRelationInput
  comments: UserCreateCommentsRelationInput
  email: String!
  followers: UserCreateFollowersRelationInput
  following: UserCreateFollowingRelationInput
  id: Int
  name: String
  profile: UserCreateProfileRelationInput
}

input UserCreateWithoutProfile {
  Media: UserCreateMediaRelationInput
  comments: UserCreateCommentsRelationInput
  email: String!
  followers: UserCreateFollowersRelationInput
  following: UserCreateFollowingRelationInput
  id: Int
  name: String
  posts: UserCreatePostsRelationInput
}

input UserFilter {
  Media: MediaListFilter
  comments: CommentListFilter
  email: StringFilter
  followers: FollowListFilter
  following: FollowListFilter
  id: IntFilter
  name: StringFilter
  posts: PostListFilter
  profile: ProfileFilter
}

input UserOrderBy {
  Media: MediaOrderBy
  comments: CommentOrderBy
  email: OrderBy
  followers: FollowOrderBy
  following: FollowOrderBy
  id: OrderBy
  name: OrderBy
  posts: PostOrderBy
  profile: ProfileOrderBy
}

input UserUniqueFilter {
  Media: MediaListFilter
  comments: CommentListFilter
  email: StringFilter
  followers: FollowListFilter
  following: FollowListFilter
  id: IntFilter
  name: StringFilter
  posts: PostListFilter
  profile: ProfileFilter
}

input UserUpdate {
  Media: UserCreateMediaRelationInput
  comments: UserCreateCommentsRelationInput
  email: String
  followers: UserCreateFollowersRelationInput
  following: UserCreateFollowingRelationInput
  id: Int
  name: String
  posts: UserCreatePostsRelationInput
  profile: UserCreateProfileRelationInput
}

input WithCompositeIDCreate {
  FindUniqueRelations: WithCompositeIDCreateFindUniqueRelationsRelationInput
  a: String!
  b: String!
}

input WithCompositeIDCreateFindUniqueRelationsRelationInput {
  connect: [FindUniqueRelationsUniqueFilter!]
  create: [FindUniqueRelationsCreateWithoutWithCompositeID!]
}

input WithCompositeIDCreateWithoutFindUniqueRelations {
  a: String!
  b: String!
}

input WithCompositeIDFilter {
  FindUniqueRelations: FindUniqueRelationsListFilter
  a: StringFilter
  b: StringFilter
}

input WithCompositeIDOrderBy {
  FindUniqueRelations: FindUniqueRelationsOrderBy
  a: OrderBy
  b: OrderBy
}

input WithCompositeIDUniqueFilter {
  FindUniqueRelations: FindUniqueRelationsListFilter
  a: StringFilter
  b: StringFilter
}

input WithCompositeIDUpdate {
  FindUniqueRelations: WithCompositeIDCreateFindUniqueRelationsRelationInput
  a: String
  b: String
}

input WithCompositeUniqueCreate {
  FindUniqueRelations: WithCompositeUniqueCreateFindUniqueRelationsRelationInput
  a: String!
  b: String!
  c: String
}

input WithCompositeUniqueCreateFindUniqueRelationsRelationInput {
  connect: [FindUniqueRelationsUniqueFilter!]
  create: [FindUniqueRelationsCreateWithoutWithCompositeUnique!]
}

input WithCompositeUniqueCreateWithoutFindUniqueRelations {
  a: String!
  b: String!
  c: String
}

input WithCompositeUniqueFilter {
  FindUniqueRelations: FindUniqueRelationsListFilter
  a: StringFilter
  b: StringFilter
  c: StringFilter
}

input WithCompositeUniqueOrderBy {
  FindUniqueRelations: FindUniqueRelationsOrderBy
  a: OrderBy
  b: OrderBy
  c: OrderBy
}

input WithCompositeUniqueUniqueFilter {
  FindUniqueRelations: FindUniqueRelationsListFilter
  a: StringFilter
  b: StringFilter
  c: StringFilter
}

input WithCompositeUniqueUpdate {
  FindUniqueRelations: WithCompositeUniqueCreateFindUniqueRelationsRelationInput
  a: String
  b: String
  c: String
}

input WithIDCreate {
  FindUniqueRelations: WithIDCreateFindUniqueRelationsRelationInput
  id: String!
}

input WithIDCreateFindUniqueRelationsRelationInput {
  connect: [FindUniqueRelationsUniqueFilter!]
  create: [FindUniqueRelationsCreateWithoutWithID!]
}

input WithIDCreateWithoutFindUniqueRelations {
  id: String!
}

input WithIDFilter {
  FindUniqueRelations: FindUniqueRelationsListFilter
  id: StringFilter
}

input WithIDOrderBy {
  FindUniqueRelations: FindUniqueRelationsOrderBy
  id: OrderBy
}

input WithIDUniqueFilter {
  FindUniqueRelations: FindUniqueRelationsListFilter
  id: StringFilter
}

input WithIDUpdate {
  FindUniqueRelations: WithIDCreateFindUniqueRelationsRelationInput
  id: String
}

input WithUniqueCreate {
  FindUniqueRelations: WithUniqueCreateFindUniqueRelationsRelationInput
  id: String!
}

input WithUniqueCreateFindUniqueRelationsRelationInput {
  connect: [FindUniqueRelationsUniqueFilter!]
  create: [FindUniqueRelationsCreateWithoutWithUnique!]
}

input WithUniqueCreateWithoutFindUniqueRelations {
  id: String!
}

input WithUniqueFilter {
  FindUniqueRelations: FindUniqueRelationsListFilter
  id: StringFilter
}

input WithUniqueOrderBy {
  FindUniqueRelations: FindUniqueRelationsOrderBy
  id: OrderBy
}

input WithUniqueUniqueFilter {
  FindUniqueRelations: FindUniqueRelationsListFilter
  id: StringFilter
}

input WithUniqueUpdate {
  FindUniqueRelations: WithUniqueCreateFindUniqueRelationsRelationInput
  id: String
}